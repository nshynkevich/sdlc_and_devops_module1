-----

08.08 monday 
docker + SDLC
-----

1) flannel VS calico


C4 model
ะก4 model, Context Container Component Code model
    decomposition of a system into containers and components

    * Context diagrams (level 1): 
        show the system in scope and its relationship with users and other systems;
    * Container diagrams (level 2): 
        decompose a system into interrelated containers. A container represents an application or a data store;
    * Component diagrams (level 3): 
        decompose containers into interrelated components, and relate the components to other containers or other systems;
    * Code diagrams (level 4): 
        provide additional details about the design of the architectural elements that can be mapped to code. C4 model relies at this level on existing notations such as Unified Modelling Language (UML), Entity Relation Diagrams (ERD) or diagrams generated by Integrated Development Environments (IDE).
--------------
 SDLC

 1) What is SDLC?
    Software Development Life Cycle; methodology with clearly defined processes for creating high-quality software
    * Requirement analysis
    * Planning
    * Software design such as architectural design
    * Software development
    * Testing
    * Deployment
    (we using Spiral Model**??)
    
    **The most flexible of the SDLC models, the spiral model is similar to the iterative model in its emphasis on repetition. The spiral model goes through the planning, design, build and test phases over and over, with gradual improvements at each pass.)

 2) Why SDLC does matter?
    SDLC done right can allow the highest level of management control and documentation. 
    Developers understand what they should build and why. 
    All parties agree on the goal upfront and see a clear plan for arriving at that goal. 
    Everyone understands the costs and resources required.

    pitfalls e.g.: 
    Failure to take into account the needs of customers and all users and stakeholders can result 
    in a poor understanding of the system requirements at the outset. 
    !The benefits of SDLC only exist if the plan is followed faithfully.

 3) SDLC Phases
    * Requirement analysis
    * Planning
    * Software design such as architectural design
    * Software development
    * Testing
    * Deployment

 4) Popular SDLC Models
    * Waterfall Model
        finish one phase and then start the next; cons: small incomplete details can stop the whole process
    * Agile Model
        separates the product into cycles and delivers a working product very quickly + testing of each release
    * Iterative Model
        very fast creating of new versions, then testing and improving
        big disadvantage: can eat up resources fast if left unchecked
    * V-Shaped Model
        extension of the waterfall model
        tests at each stage of development
    * Big Bang Model
        most of resources at development and works best for small projects
        lacks the requirements definition
    * Spiral Model
        similar to the iterative model in its emphasis on repetition
        goes through the planning, design, build and test phases over and over, with gradual improvements at each pass

What is Agile Methodology?
Agile core values
Agile Model Vs Waterfall Model
What is Scrum?
Product Backlog
Scrum Practices
Process flow of Scrum Methodologies
What is Kanban?
Scrum Vs Kanban
 DevOps
What is DevOps?
How is DevOps different from Agile Methodology?
Core benefits of DevOps
Important DevOps KPIs
Infrastructure as Code
What is Continuous integration (CI)?
What is Continuous delivery (CD)?
Devops Anti-Patterns
The Four Pillars of Effective Devops
What is declarative model?
What is imperative model?
What is a smoke test?
What Are the Challenges in the Traditional DevOps Process?

--------------

 Git

What is VCS?

What is the purpose of VCS?

What is the difference between centralized and distributed VCS?

What is Git?

What is the difference between a pull request and a merge request?

Git commands

Concept of branching in Git

Difference between Git Merge and Git Rebase

What is a merge conflict in Git, and how can it be resolved?


 Jenkins

What is Jenkins?

Jenkins architecture

What is the difference between a Jenkins master and a Jenkins agent (slave)?

What is the difference between vertical and horizontal scaling?

How master and the agent communicate,?

What is Jenkinsfile?

What concepts are key aspects of the Jenkins pipeline

Explain the two types of pipelines in Jenkins, along with their syntax.

How do you create a backup and copy files in Jenkins?

How can you copy Jenkins from one server to another?

Name three security mechanisms Jenkins uses to authenticate users.

What are how a build can be scheduled/run in Jenkins?


 Docker

why containers? 
lightweight & easier for orchestration 

Architecture of Docker

What is Container Engine?

What is a Container Runtime?

What means "This container is immutable"?

What does the Docker engine consist of?

What is the Docker engine?

What is containerd?
Docker provides a broad set of technologies used to run and manage containers. One of those technologies is Docker Engine, a full-featured container runtime with advanced developer tools.

containerd is also a container runtime, based on Docker technology. You can use containerd on its own, as a bare-bones container runtime solution. Additionally, newer versions of Docker Engine use containerd behind the scenes. 

The Docker Engine command line interface (CLI) allows you to interact with the underlying container runtime using commands. For example, the docker run command instructs the container runtime to create a container based on a specified image. Behind the scenes, containerd takes over, downloads the relevant container image, and creates a container from that image.

Purpose of containerd?

What is runc?

Purpose of runc?

What are the advantages of Docker over virtual machines?

Docker Compose

Docker Swarm

What is a Dockerfile used for?

Explain the differences between Docker images and Docker containers.

How do you create a Docker container?

What is the difference between a registry and a repository?


 K8s

What is Kubernetes?

Why you need Kubernetes and what it can do

What Kubernetes is not

Kubernetes Components

Control Plane Components

Node Components

Kubernetes Objects

Object Spec and Status

Kubernetes Object Management

Namespaces

Labels and Selectors

Cluster Architecture

Nodes

Node status

Communication between Nodes and the Control Plane

Container Runtime Interface (CRI)

Workloads

Pods

Resources

Deployments

ReplicaSet

StatefulSets

DaemonSet

Jobs

Automatic Clean-up for Finished Jobs

CronJob

ReplicationController

Services, Load Balancing, and Networking

The Kubernetes network model

DNS for Services and Pods

Connecting Applications with Services

Ingress

Network Policies

Storage

Volumes

Persistent Volumes

Configuration

Configuration Best Practices

ConfigMaps

Secrets

How to deploy the cluster?
